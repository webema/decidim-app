function isQuotaError(storage, e) {
    return (e instanceof DOMException &&
        (e.code === 22 ||
            e.code === 1014 ||
            e.name === 'QuotaExceededError' ||
            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
        storage.length !== 0);
}
export class StorageAPI {
    constructor(storage) {
        if (storage) {
            this.storage = storage;
        }
        else if (storage === null) {
            this.storage = null;
        }
        else {
            this.storage = typeof window !== 'undefined' ? window.localStorage : null;
        }
    }
    get(name) {
        if (!this.storage) {
            return null;
        }
        const key = `${STORAGE_NAMESPACE}:${name}`;
        const value = this.storage.getItem(key);
        if (value === 'null' || value === 'undefined') {
            this.storage.removeItem(key);
            return null;
        }
        return value || null;
    }
    set(name, value) {
        let quotaError = false;
        let error = null;
        if (this.storage) {
            const key = `${STORAGE_NAMESPACE}:${name}`;
            if (value) {
                try {
                    this.storage.setItem(key, value);
                }
                catch (e) {
                    error = e instanceof Error ? e : new Error(`${e}`);
                    quotaError = isQuotaError(this.storage, e);
                }
            }
            else {
                this.storage.removeItem(key);
            }
        }
        return { isQuotaError: quotaError, error };
    }
}
const STORAGE_NAMESPACE = 'graphiql';
//# sourceMappingURL=base.js.map