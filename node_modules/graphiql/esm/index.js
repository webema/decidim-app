var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { GraphiQL } from './components/GraphiQL';
export { GraphiQL };
export default GraphiQL;
export { QueryEditor } from './components/QueryEditor';
export { VariableEditor } from './components/VariableEditor';
export { DocExplorer } from './components/DocExplorer';
export { ToolbarMenu, ToolbarMenuItem } from './components/ToolbarMenu';
export { ToolbarButton } from './components/ToolbarButton';
export { ToolbarGroup } from './components/ToolbarGroup';
export { ToolbarSelect, ToolbarSelectOption } from './components/ToolbarSelect';
import { onHasCompletion as _onHasCompletion } from '@graphiql/react';
import { fillLeafs as _fillLeafs, getSelectedOperationName as _getSelectedOperationName, mergeAst as _mergeAst, } from '@graphiql/toolkit';
export var onHasCompletion = function onHasCompletion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `onHasCompletion` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `onHasCompletion` function provided by the `@graphiql/react` package.');
    return _onHasCompletion.apply(void 0, __spreadArray([], __read(args), false));
};
export var fillLeafs = function fillLeafs() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `fillLeafs` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `fillLeafs` function provided by the `@graphiql/toolkit` package.');
    return _fillLeafs.apply(void 0, __spreadArray([], __read(args), false));
};
export var getSelectedOperationName = function getSelectedOperationName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `getSelectedOperationName` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `getSelectedOperationName` function provided by the `@graphiql/toolkit` package.');
    return _getSelectedOperationName.apply(void 0, __spreadArray([], __read(args), false));
};
export var mergeAst = function mergeAst() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `mergeAst` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `mergeAst` function provided by the `@graphiql/toolkit` package.');
    return _mergeAst.apply(void 0, __spreadArray([], __read(args), false));
};
//# sourceMappingURL=index.js.map