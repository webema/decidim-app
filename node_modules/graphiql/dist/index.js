"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeAst = exports.getSelectedOperationName = exports.fillLeafs = exports.onHasCompletion = exports.ToolbarSelectOption = exports.ToolbarSelect = exports.ToolbarGroup = exports.ToolbarButton = exports.ToolbarMenuItem = exports.ToolbarMenu = exports.DocExplorer = exports.VariableEditor = exports.QueryEditor = exports.GraphiQL = void 0;
var GraphiQL_1 = require("./components/GraphiQL");
Object.defineProperty(exports, "GraphiQL", { enumerable: true, get: function () { return GraphiQL_1.GraphiQL; } });
exports.default = GraphiQL_1.GraphiQL;
var QueryEditor_1 = require("./components/QueryEditor");
Object.defineProperty(exports, "QueryEditor", { enumerable: true, get: function () { return QueryEditor_1.QueryEditor; } });
var VariableEditor_1 = require("./components/VariableEditor");
Object.defineProperty(exports, "VariableEditor", { enumerable: true, get: function () { return VariableEditor_1.VariableEditor; } });
var DocExplorer_1 = require("./components/DocExplorer");
Object.defineProperty(exports, "DocExplorer", { enumerable: true, get: function () { return DocExplorer_1.DocExplorer; } });
var ToolbarMenu_1 = require("./components/ToolbarMenu");
Object.defineProperty(exports, "ToolbarMenu", { enumerable: true, get: function () { return ToolbarMenu_1.ToolbarMenu; } });
Object.defineProperty(exports, "ToolbarMenuItem", { enumerable: true, get: function () { return ToolbarMenu_1.ToolbarMenuItem; } });
var ToolbarButton_1 = require("./components/ToolbarButton");
Object.defineProperty(exports, "ToolbarButton", { enumerable: true, get: function () { return ToolbarButton_1.ToolbarButton; } });
var ToolbarGroup_1 = require("./components/ToolbarGroup");
Object.defineProperty(exports, "ToolbarGroup", { enumerable: true, get: function () { return ToolbarGroup_1.ToolbarGroup; } });
var ToolbarSelect_1 = require("./components/ToolbarSelect");
Object.defineProperty(exports, "ToolbarSelect", { enumerable: true, get: function () { return ToolbarSelect_1.ToolbarSelect; } });
Object.defineProperty(exports, "ToolbarSelectOption", { enumerable: true, get: function () { return ToolbarSelect_1.ToolbarSelectOption; } });
var react_1 = require("@graphiql/react");
var toolkit_1 = require("@graphiql/toolkit");
var onHasCompletion = function onHasCompletion() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `onHasCompletion` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `onHasCompletion` function provided by the `@graphiql/react` package.');
    return react_1.onHasCompletion.apply(void 0, __spreadArray([], __read(args), false));
};
exports.onHasCompletion = onHasCompletion;
var fillLeafs = function fillLeafs() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `fillLeafs` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `fillLeafs` function provided by the `@graphiql/toolkit` package.');
    return toolkit_1.fillLeafs.apply(void 0, __spreadArray([], __read(args), false));
};
exports.fillLeafs = fillLeafs;
var getSelectedOperationName = function getSelectedOperationName() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `getSelectedOperationName` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `getSelectedOperationName` function provided by the `@graphiql/toolkit` package.');
    return toolkit_1.getSelectedOperationName.apply(void 0, __spreadArray([], __read(args), false));
};
exports.getSelectedOperationName = getSelectedOperationName;
var mergeAst = function mergeAst() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.warn('Importing `mergeAst` from `graphiql` is deprecated and will be removed in the next major version. Please switch to importing the `mergeAst` function provided by the `@graphiql/toolkit` package.');
    return toolkit_1.mergeAst.apply(void 0, __spreadArray([], __read(args), false));
};
exports.mergeAst = mergeAst;
//# sourceMappingURL=index.js.map