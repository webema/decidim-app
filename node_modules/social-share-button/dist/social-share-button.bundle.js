var socialShareButton = (function () {
  'use strict';

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  /* global window */
  function attrobj(key, el) {
    var values = {};
    Object.keys(el.dataset).forEach(function (data) {
      if (data.match(new RegExp("^" + key)) && data !== key) {
        var optionName = data.replace(key, '');
        var isGlobal = false;

        if (optionName.match(/^Global/)) {
          optionName = optionName.replace('Global', '');
          isGlobal = true;
        }

        optionName = "" + optionName[0].toLowerCase() + optionName.slice(1);

        if (isGlobal) {
          values[optionName] = window[el.dataset[data]];
        } else {
          values[optionName] = el.dataset[data];
        }

        if (typeof values[optionName] === 'undefined' || values[optionName] === '') {
          values[optionName] = true;
        }
      }
    });
    return values;
  }

  var l = function l() {
    var l = [].slice.call(arguments);
    return l.unshift(!1), t.apply(null, l);
  };

  function t() {
    var t = [].slice.call(arguments),
        e = t[0],
        n = {};
    return t.slice(1, t.length).forEach(function (r) {
      Object.keys(r).forEach(function (a) {
        if (!e || void 0 !== t[1][a]) {
          var c = r[a];
          n[a] = Array.isArray(c) || "object" != typeof c || "object" != typeof n[a] ? c : (e ? l.defaults : l)(n[a], c);
        }
      });
    }), n;
  }

  l.defaults = function () {
    var l = [].slice.call(arguments);
    return l.unshift(!0), t.apply(null, l);
  };

  function isWindow(obj) {
    return obj != null && obj === obj.window;
  }

  function find(selector, context) {
    if (context === void 0) {
      context = null;
    }

    if (selector instanceof HTMLElement || selector instanceof Node || isWindow(selector)) {
      return [selector];
    } else if (selector instanceof NodeList) {
      return [].slice.call(selector);
    } else if (typeof selector === 'string') {
      var startElement = context ? find(context)[0] : document;
      return [].slice.call(startElement.querySelectorAll(selector));
    }

    return [];
  }

  function on(selector, event, cb, capture) {
    if (capture === void 0) {
      capture = false;
    }

    if (Array.isArray(selector)) {
      selector.forEach(function (item) {
        return on(item, event, cb, capture);
      });
      return;
    }

    var data = {
      cb: cb,
      capture: capture
    };

    if (!window._domassistevents) {
      window._domassistevents = {};
    }

    window._domassistevents["_" + event] = data;
    var el = find(selector);

    if (el.length) {
      el.forEach(function (item) {
        item.addEventListener(event, cb, capture);
      });
    }
  }

  function findOne(selector, el) {
    var found = find(selector, el);

    if (found.length) {
      return found[0];
    }

    return null;
  } // Check for the usage of native support for CustomEvents which is lacking

  function d(t) {
    return t.parentNode ? JSON.parse(JSON.stringify(t.parentNode.dataset)).module ? t.parentNode : d(t.parentNode) : t;
  }

  var n = {
    find: find,
    findOne: findOne,
    on: on
  };

  var r =
  /*#__PURE__*/
  function () {
    function r(o) {
      return this.log("begin setup"), this.el = o, this.els = {}, this.options = l({}, this.defaults, attrobj("module", this.el)), this.moduleName = this.el.dataset.module, this.setUps = {
        actions: [],
        named: [],
        options: []
      }, this.boundActionRouter = this.actionRouter.bind(this), this.preInit(), this.storeRef(), this.setupActions(), this.setupNamed(), this.verifyRequired(), this.postInit(), this.log("initalized"), r.debug && (this.el.module = this), this;
    }

    var _proto = r.prototype;

    _proto.preInit = function preInit() {};

    _proto.postInit = function postInit() {};

    _proto.verifyRequired = function verifyRequired() {
      var _this = this;

      return this.required === {} || (void 0 !== this.required.options && (this.setUps.options = Object.keys(this.options)), Object.keys(this.required).forEach(function (t) {
        _this.required[t].forEach(function (e) {
          if (_this.setUps[t].indexOf(e) < 0) throw new Error(e + " is required as " + t + " for " + _this.moduleName + ", but is missing!");
        });
      })), this;
    };

    _proto.setupActions = function setupActions() {
      var _this2 = this;

      this.setupAction(this.el), this.find("[data-action]").forEach(function (t) {
        d(t) === _this2.el && _this2.setupAction(t);
      });
    };

    _proto.setupAction = function setupAction(t) {
      if ("true" === t.dataset.domoduleActionProcessed) return;

      var _r$parseAction = r.parseAction(t),
          e = _r$parseAction.name,
          o = _r$parseAction.type;

      e && ("function" == typeof this[e] ? (this.log(e + " bound"), this.storeSetUp(e, "actions"), n.on(t, o, this.boundActionRouter), t.dataset.domoduleActionProcessed = "true") : this.log(e + " was registered, but there is no function set up"));
    };

    _proto.actionRouter = function actionRouter(e) {
      var o = e.currentTarget,
          _r$parseAction2 = r.parseAction(o),
          s = _r$parseAction2.name,
          i = attrobj("action", o);

      this[s].call(this, o, e, i);
    };

    _proto.setupNamed = function setupNamed() {
      var _this3 = this;

      this.find("[data-name]").forEach(function (t) {
        d(t) === _this3.el && (t.dataset.domoduleNameProcessed || (_this3.els[t.dataset.name] = t, _this3.storeSetUp(t.dataset.name, "named"), t.dataset.domoduleNameProcessed = "true", t.dataset.domoduleOwner = _this3.id));
      });
    };

    _proto.storeRef = function storeRef() {
      if (void 0 === window.domorefs && (window.domorefs = {}), void 0 !== window.domorefs[this.el.dataset.moduleUid]) return !1;
      this.id = this.uuid, this.el.dataset.moduleUid = this.id, window.domorefs[this.el.dataset.moduleUid] = this;
    };

    _proto.find = function find(t) {
      return n.find(t, this.el);
    };

    _proto.findOne = function findOne(t) {
      return n.findOne(t, this.el);
    };

    _proto.findByName = function findByName(t) {
      return this.els[t];
    };

    _proto.getOption = function getOption(t) {
      return this.options[t];
    };

    _proto.storeSetUp = function storeSetUp(t, e) {
      this.setUps[e].indexOf(t) < 0 && this.setUps[e].push(t);
    };

    _proto.destroy = function destroy() {
      var _this4 = this;

      n.find("[data-action]", this.el.parentNode).forEach(function (t) {
        if ("true" === t.dataset.domoduleActionProcessed) {
          var _r$parseAction3 = r.parseAction(t),
              _e = _r$parseAction3.type;

          t.removeEventListener(_e, _this4.boundActionRouter), t.dataset.domoduleActionProcessed = "false";
        }
      });
    };

    r.parseAction = function parseAction(t) {
      var _t$dataset = t.dataset,
          e = _t$dataset.action,
          _t$dataset$actionType = _t$dataset.actionType,
          o = _t$dataset$actionType === void 0 ? "click" : _t$dataset$actionType;
      return {
        name: e,
        type: o
      };
    };

    r.getInstance = function getInstance(t) {
      if (t instanceof Node) return window.domorefs[t.dataset.moduleUid];
      throw new Error("getInstance expects a dom node");
    };

    r.register = function register(t, e) {
      "function" == typeof t && (t = (e = t).prototype.constructor.name), window.domodules || (window.domodules = {}), r.log("Registering " + t), window.domodules[t] = e;
    };

    r.discover = function discover(t) {
      if (t === void 0) {
        t = "body";
      }

      if (r.log("Discovering modules..."), !window.domodules) return void r.log("No modules found");
      var e;
      e = t instanceof Node ? [t] : Array.isArray(t) ? t : n.find(t);
      var o = [];
      return e.forEach(function (t) {
        n.find("[data-module]", t).forEach(function (t) {
          var e = t.dataset.module;

          if (e && "function" == typeof window.domodules[e]) {
            if ("object" == typeof window.domorefs && void 0 !== window.domorefs[t.dataset.moduleUid]) return;
            r.log(e + " found"), o.push(new window.domodules[e](t));
          }
        });
      }), o;
    };

    _proto.log = function log(t) {
      r.log(this.constructor.name + ": " + t);
    };

    r.log = function log(t) {
      r.debug && console.log("[DOMODULE] " + t);
    };

    _createClass(r, [{
      key: "required",
      get: function get() {
        return {};
      }
    }, {
      key: "defaults",
      get: function get() {
        return {};
      }
    }, {
      key: "uuid",
      get: function get() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (t) {
          var e = 16 * Math.random() | 0;
          return ("x" === t ? e : 3 & e | 8).toString(16);
        });
      }
    }]);

    return r;
  }();

  r.debug = "object" == typeof window.localStorage && window.localStorage.getItem("DomoduleDebug"), r.autoDiscover = !0, window.addEventListener("DOMContentLoaded", function () {
    r.autoDiscover && r.discover();
  });

  var BASE_URLS = {
    twitter: 'https://twitter.com/intent/tweet',
    facebook: 'https://www.facebook.com/sharer/sharer.php',
    gplus: 'https://plus.google.com/share',
    linkedin: 'https://www.linkedin.com/shareArticle',
    pinterest: 'https://pinterest.com/pin/create/button',
    reddit: 'https://reddit.com/submit'
  };

  var SocialShareButton =
  /*#__PURE__*/
  function (_Domodule) {
    _inheritsLoose(SocialShareButton, _Domodule);

    function SocialShareButton() {
      return _Domodule.apply(this, arguments) || this;
    }

    var _proto = SocialShareButton.prototype;

    _proto.postInit = function postInit() {
      var _this = this;

      var setupMethod = this.options.net + "Setup";
      var shareMethod = this.options.net + "Share";

      if (!this[shareMethod] && !this[setupMethod]) {
        throw new Error("Sharing method for " + this.options.net + " is not implemented");
      }

      if (this[setupMethod]) {
        this[setupMethod]();
      }

      if (this[shareMethod]) {
        on(this.el, 'click', function (event) {
          event.preventDefault();

          _this[shareMethod]();
        });
      }
    };

    _proto.getShareUrl = function getShareUrl() {
      var url = window.location.href;

      if (this.options.baseUrl) {
        if (this.options.relative) {
          url = "" + window.location.origin + window.location.pathname + this.options.baseUrl;
        } else {
          url = this.options.baseUrl;
        }
      }

      return url;
    };

    _proto.gplusShare = function gplusShare() {
      SocialShareButton.openWindow(this.el.href, '600', '500', 'gplusWindow');
    };

    _proto.twitterShare = function twitterShare() {
      SocialShareButton.openWindow(this.el.href, '260', '500', 'twitterWindow');
    };

    _proto.linkedinShare = function linkedinShare() {
      SocialShareButton.openWindow(this.el.href, '520', '570', 'linkedinWindow');
    };

    _proto.pinterestShare = function pinterestShare() {
      SocialShareButton.openWindow(this.el.href, '600', '600', 'pinterestWindow');
    };

    _proto.redditShare = function redditShare() {
      SocialShareButton.openWindow(this.el.href, '600', '600', 'redditWindow');
    };

    _proto.facebookShare = function facebookShare() {
      if (typeof window.FB !== 'undefined' && typeof window.FB.ui !== 'undefined') {
        var object = {
          method: 'share',
          href: this.getShareUrl()
        };

        if (this.options.tag) {
          object.hashtag = "#" + this.options.tag;
        }

        if (this.options.text) {
          object.quote = this.options.text;
        }

        FB.ui(object);
      } else {
        SocialShareButton.openWindow(this.el.href, '440', '600', 'facebookWindow');
      }
    };

    _proto.facebookSetup = function facebookSetup() {
      var params = ["u=" + this.getShareUrl()];

      if (this.options.tag) {
        params.push("hashtag=" + encodeURIComponent("#" + this.options.tag));
      }

      if (this.options.text) {
        params.push("quote=" + encodeURIComponent(this.options.text));
      }

      this.el.href = BASE_URLS.facebook + "?" + params.join('&');
    };

    _proto.emailSetup = function emailSetup() {
      var title = encodeURIComponent(this.options.subject || document.title);
      var body = this.options.body || 'Check this out #url';
      body = body.replace(/#url/gi, this.getShareUrl());
      body = encodeURIComponent(body);
      this.el.href = "mailto:?subject=" + title + "&body=" + body;
    };

    _proto.gplusSetup = function gplusSetup() {
      this.el.href = BASE_URLS.gplus + "?url=" + this.getShareUrl();
    };

    _proto.linkedinSetup = function linkedinSetup() {
      var params = ["url=" + encodeURIComponent(this.getShareUrl())];
      var shareText = this.options.text;
      var shareTitle = this.options.title;

      if (shareText) {
        params.push("summary=" + encodeURIComponent(shareText));
      }

      if (shareTitle) {
        params.push("title=" + encodeURIComponent(shareTitle));
      }

      this.el.href = BASE_URLS.linkedin + "?mini=true&" + params.join('&');
    };

    _proto.twitterSetup = function twitterSetup() {
      var shareText = this.options.text || SocialShareButton.getMeta('text', 'twi');
      var shareTag = this.options.tags || SocialShareButton.getMeta('hashtag', 'twi');
      var shareVia = this.options.via || SocialShareButton.getMeta('author', 'twi');
      var params = [];
      params.push("url=" + encodeURIComponent(this.getShareUrl()));

      if (shareText) {
        params.push("text=" + encodeURIComponent(shareText));
      }

      if (shareTag && shareTag !== 'none') {
        params.push("hashtags=" + encodeURIComponent(shareTag));
      }

      if (shareVia && shareVia !== 'none') {
        params.push("via=" + encodeURIComponent(shareVia));
      }

      this.el.href = BASE_URLS.twitter + "?" + params.join('&');
    };

    _proto.pinterestSetup = function pinterestSetup() {
      var shareTitle = this.options.title || SocialShareButton.getMeta('title');
      var shareMedia = this.options.media || SocialShareButton.getMeta('image');
      var params = ["url=" + encodeURIComponent(this.getShareUrl())];

      if (shareTitle) {
        params.push("description=" + encodeURIComponent(shareTitle));
      }

      if (shareMedia) {
        params.push("media=" + encodeURIComponent(shareMedia));
      }

      this.el.href = BASE_URLS.pinterest + "?" + params.join('&');
    };

    _proto.redditSetup = function redditSetup() {
      var shareTitle = this.options.title;
      var params = ["url=" + encodeURIComponent(this.getShareUrl())];

      if (shareTitle) {
        params.push("title=" + encodeURIComponent(shareTitle));
      }

      this.el.href = BASE_URLS.reddit + "?" + params.join('&');
    };

    SocialShareButton.getMeta = function getMeta(tag, prop) {
      if (prop === void 0) {
        prop = 'og';
      }

      var meta = findOne("meta[property=\"" + prop + ":" + tag + "\"]");
      return meta ? meta.getAttribute('content') : null;
    };

    SocialShareButton.openWindow = function openWindow(url, height, width, key) {
      window.open(url, key, "menubar=no,toolbar=no,left=200,top=200,resizable=yes,scrollbars=no,height=" + height + ",width=" + width);
    };

    _createClass(SocialShareButton, [{
      key: "required",
      get: function get() {
        return {
          options: ['net']
        };
      }
    }, {
      key: "defaults",
      get: function get() {
        return {
          relative: false,
          baseUrl: false
        };
      }
    }]);

    return SocialShareButton;
  }(r);
  r.register('SocialShareButton', SocialShareButton);

  return SocialShareButton;

}());
//# sourceMappingURL=social-share-button.bundle.js.map
